// Регулярные выражения!
// . - любой одиночный символ
// [ ] - любой из них, диапазоны
// $ - конец строки
// ^ - начало строки
// \ - экранирование
// \d - любую цифру
// \D - все что угодно, кроме цифр
// \s - пробелы
// \S - все кроме пробелов
// \w - буква
// \W - все кроме букв
// \b - граница слова
// \B - не границ

// Квантификация
// n{4} - искать n подряд 4 раза
// n{4,6} - искать n от 4 до 6
// * от нуля и выше
// + от 1 и выше
// ? - нуль или 1 раз

/*Флаги
Регулярные выражения могут иметь флаги, которые влияют на поиск.
В JavaScript их всего шесть:

i  -С этим флагом поиск не зависит от регистра: нет разницы между A и a (см. пример ниже).
g
С этим флагом поиск ищет все совпадения, без него – только первое.
m
Многострочный режим (рассматривается в главе Многострочный режим якорей ^ $, флаг "m").
s
Включает режим «dotall», при котором точка . может соответствовать символу перевода строки \n (рассматривается в главе Символьные классы).
u
Включает полную поддержку Юникода. Флаг разрешает корректную обработку суррогатных пар (подробнее об этом в главе Юникод: флаг "u" и класс \p{...}).
y
Режим поиска на конкретной позиции в тексте (описан в главе Поиск на заданной позиции, флаг "y")
*/

// // // 1.  Проверка наличия подстроки:
// Регулярные выражения позволяют проверить, содержится ли определенная подстрока в тексте. Например, вы можете использовать следующий код, чтобы проверить, содержит ли строка "Hello, World!" подстроку "World":
const str = "Hello, World!";
const pattern = /World/;

if (pattern.test(str)) {
  // .test -Возвращает логическое значение, указывающее, существует ли шаблон в искомой строке.
  console.log("Подстрока найдена!");
} else {
  console.log("Подстрока не найдена.");
}

// // // 2. Поиск и замена:
//Регулярные выражения позволяют найти все вхождения определенного шаблона в тексте и заменить их другой строкой. Например, вы можете использовать следующий код, чтобы заменить все вхождения чисел в строке на слово "Number":

const str = "I have 5 apples and 3 oranges.";
const pattern = /\d+/g;

const replacedStr = str.replace(pattern, "Number");
console.log(replacedStr);
// Вывод: "I have Number apples and Number oranges."

// // // 3. Валидация форматов данных:
// Регулярные выражения могут быть использованы для проверки форматов данных, таких как электронная почта, номер телефона или почтовый индекс. Например, вы можете использовать следующий код, чтобы проверить, является ли строка допустимым адресом электронной почты:

const email = "example@example.com";
const pattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

if (pattern.test(email)) {
  console.log("Адрес электронной почты действителен.");
} else {
  console.log("Адрес электронной почты недействителен.");
}


// // // 4. Разделение и извлечение данных:
// Регулярные выражения могут использоваться для разделения текста на части или извлечения определенной информации из строки. Например, вы можете использовать следующий код, чтобы разделить строку, содержащую имена, разделенные запятыми, на отдельные имена:
const names = "John, Jane, Bob, Alice";
const pattern = /,\s*/;

const nameList = names.split(pattern);
console.log(nameList);
// Вывод: ["John", "Jane", "Bob", "Alice"]
